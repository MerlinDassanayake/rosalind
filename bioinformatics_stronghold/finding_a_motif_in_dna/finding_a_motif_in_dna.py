# Given: Two DNA strings s and t (each of length at most 1kbp).
# Return: All locations of t as a substring of s.

# Hardcode in sequence and motif, can use readfile as well
sequence = "CCAGGGTGACCGGGTGACCAGGTGACCTTCTGAGGTGACCCAAGGTGACCAACGCCGGTGACCGGTGACCGGTGACCCGGTGACCAGGTGACCCCGGTGACCCAATCAGTCGGGTGACCTGGCGGGGGTGACCTGGTGACCATATCGGTGACCAAAGACGCGGCGGGTGACCGGTGACCGCGGTGACCTAGCCGGTGACCTGATGGGTGACCGCGGTGACCTCCGGTGACCAGGTGACCGGTGACCGGTGACCGCGGCCGGTGACCAGGTGACCCAGGAGCAGGTGAAGGGTGACCGGTGACCCGGGTGACCCGGTGACCGGTGACCTTAGGTGACCGGGCCGGAGGGTGACCTGGTGACCTAGGCGCAGGTGACCGGGGTGACCCTGGTGACCTGGTGACCGGGTGACCGGGTGACCATCTGGTGACCGGTGACCGTGAGCGGTGACCTTGGTGACCTTCCTGGTGACCGGTGACCGCAGGTGACCGGTGACCCGGTGACCGCGAACGGGTGACCTCATCAGGTGACCGGTGACCGGTGACCAACGGTGACCTATGGTGACCTCGCCGGTGACCAGGTGACCTTGTTTGGTGACCGGTGACCACAAGGTGACCGGTGACCGGTGACCGGTGACCTAGGTGACCGGTGACCAGGAGGTGACCCTTCGCGCGGGTGACCTGGGGTGACCGGTGACCAGGTGACCCCAGGTGACCAATTAGGTGACCTGGTGACCGGTGACCCGGTGACCGGTGACCGGTGACCTGGTGACCCGGTGACCGGTGACCAGGTGACCGGTTTGCGGTGACCCAGTGGTGACCGGTGACCGGTGACCGGTGACCGGGTGACCTTGGTGACCGTCGGTGACCGGGTGGTGACCGATGGGGTGACCGGTGACCGGTGACCGACGGTGACCGGTGACC"
motif = "GGTGACCGG"

# Create function to find locations of 
def motif_positions(sequence, motif):
    """Function that returns 1 based index starting location of motif in given sequence."""
    motif_len = len(motif)
    sequence_len = len(sequence)
    motif_locs = []

    for k in range(sequence_len - motif_len + 1):
        substring = sequence[k:k+motif_len]
        if substring == motif:
            motif_locs.append(k+1) # Returns one based index starting position
    print(' '.join(map(str,motif_locs))) # Makes each list value a str and joins them using ' ' separator.

motif_positions(sequence, motif) # Call the function using given sequence and motif


